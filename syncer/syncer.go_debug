package syncer

import (
    "fmt"
    "sync"
    "image-syncer/utils"
    "github.com/sirupsen/logrus"
)

type Syncer struct {
    SourceRepo string
    TargetRepo string
    Images     []string
    Logger     *logrus.Logger
}

func NewSyncer(config *utils.Config, logger *logrus.Logger) *Syncer {
    return &Syncer{
        SourceRepo: config.SourceRepo,
        TargetRepo: config.TargetRepo,
        Images:     config.Images,
        Logger:     logger,
    }
}

func (s *Syncer) syncImage(image string, wg *sync.WaitGroup, ch chan<- string) {
    defer wg.Done()
    // 模拟同步操作
    s.Logger.Infof("Syncing image: %s from %s to %s", image, s.SourceRepo, s.TargetRepo)
    // TODO: 实际同步代码
    ch <- fmt.Sprintf("Successfully synced %s", image)
}

func (s *Syncer) StartSync() {
    var wg sync.WaitGroup
    ch := make(chan string, len(s.Images))
    
    for _, image := range s.Images {
        wg.Add(1)
        go s.syncImage(image, &wg, ch)
    }
    
    go func() {
        wg.Wait()
        close(ch)
    }()
    
    for msg := range ch {
        s.Logger.Info(msg)
    }
}

